# https://taskfile.dev

version: "3"

vars:
  COV_DATA: coverage.out

tasks:
  default:
    desc: List all available tasks
    silent: true
    internal: true
    cmds: 
      - task --list

  tidy:
    desc: Tidy dependencies in go.mod and go.sum
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    cmds:
      - go mod tidy

  fmt:
    desc: Run go fmt on all source files
    sources:
      - "**/*.go"
    cmds:
      - go fmt ./...

  test:
    desc: Run the test suite
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
      - "**/testdata/**/*"
    cmds: 
      - go test -race ./... {% raw %}{{ .CLI_ARGS }}{% endraw %}

  {% if project_type == 'binary' -%}
  build:
    desc: Compile the project binary
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
      - .goreleaser.yml
    generates:
      - bin
      - dist
    cmds:
      - mkdir -p ./bin
      - goreleaser build --single-target --skip before --snapshot --clean --output ./bin/{{project_slug}}
  {%- endif %}

  bench:
    desc: Run all project benchmarks
    sources:
      - "**/*.go"
    cmds: 
      - go test ./... -run None -benchmem -bench . {% raw %}{{ .CLI_ARGS }}{% endraw %}

  {% if linter == 'golangci-lint' -%}
  lint:
    desc: Run linting
    sources:
      - "**/*.go"
      - .golangci.yml
    preconditions:
      - sh: command -v golangci-lint
        msg: golangci-lint not installed, see https://golangci-lint.run/usage/install/#local-installation

      - sh: command -v typos
        msg: requires typos-cli, run `brew install typos-cli`
    cmds:
      - golangci-lint run --fix
      - typos
  {%- else -%}
  lint:
    desc: Run linting
    sources:
      - "**/*.go"
      - staticcheck.conf
    preconditions:
      - sh: command -v staticcheck
        msg: staticcheck not installed, see https://staticcheck.dev/docs/getting-started/

      - sh: command -v typos
        msg: requires typos-cli, run `brew install typos-cli`
    cmds:
      - staticcheck ./...
      - typos
  {%- endif %}

  doc:
    desc: Render the pkg docs locally
    preconditions:
      - sh: command -v pkgsite
        msg: pkgsite not installed, run `go install golang.org/x/pkgsite/cmd/pkgsite@latest`
    cmds:
      - pkgsite -open

  cov:
    desc: Calculate test coverage and render the html
    generates:
      - {% raw %}"{{ .COV_DATA }}"{% endraw %}
    cmds:
      - go test -race -cover -covermode atomic -coverprofile {% raw %}{{ .COV_DATA }}{% endraw %} ./...
      - go tool cover -html {% raw %}{{ .COV_DATA }}{% endraw %}

  check:
    desc: Run tests and linting in one
    cmds:
      - task: test
      - task: lint

  sloc:
    desc: Print lines of code
    cmds: 
      - fd . -e go | xargs wc -l | sort -nr | head

  clean:
    desc: Remove build artifacts and other clutter
    cmds:
      - go clean ./...
      - rm -rf {% raw %}{{ .COV_DATA }}{% endraw %}

  update:
    desc: Updates dependencies in go.mod and go.sum
    cmds:
      - go get -u ./...
      - go mod tidy

  {% if project_type == 'binary' -%}
  install:
    desc: Install the project on your machine
    deps:
      - uninstall
      - build
    cmds:
      - cp ./bin/{{project_slug}} $GOBIN/{{project_slug}}

  uninstall:
    desc: Uninstall the project from your machine
    cmds:
      - rm -rf $GOBIN/{{project_slug}}
  {% endif %}