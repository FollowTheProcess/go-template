name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

permissions: read-all

env:
  GOEXPERIMENT: loopvar

jobs:
  test:
    name: Test
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Tests
        run: go test -race ./...

  cov:
    name: CodeCov
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Tests
        run: go test -race -cover -covermode=atomic -coverprofile=./coverage.out ./...

      - name: Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Clean Mod Cache # See https://github.com/golangci/golangci-lint-action/issues/135
        run: go clean -modcache

      - name: Run Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    needs:
      - test
      - cov
      - lint

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Existing Tags
        run: git fetch --force --tags

      - name: Install Syft
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: anchore/syft

      - name: Parse Release Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Publish Draft Release
        uses: release-drafter/release-drafter@v5
        with:
          version: {% raw %}${{ steps.version.outputs.version }}{% endraw %}
          publish: true
        env:
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          HOMEBREW_TAP_TOKEN: {% raw %}${{ secrets.HOMEBREW_TAP_TOKEN }}{% endraw %}
